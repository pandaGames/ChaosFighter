; Listing generated by Microsoft (R) Optimizing Compiler Version 16.00.30319.01 

	TITLE	D:\MyCodes\ChaosFighter\trunk\ChaosFighter\HGEGame\Screen\Mission.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	?value@?$integral_constant@_N$0A@@tr1@std@@2_NB	; std::tr1::integral_constant<bool,0>::value
PUBLIC	?value@?$integral_constant@_N$00@tr1@std@@2_NB	; std::tr1::integral_constant<bool,1>::value
PUBLIC	?value@?$integral_constant@I$0A@@tr1@std@@2IB	; std::tr1::integral_constant<unsigned int,0>::value
PUBLIC	?_Rank@?$_Arithmetic_traits@_N@std@@2HB		; std::_Arithmetic_traits<bool>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@D@std@@2HB		; std::_Arithmetic_traits<char>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@C@std@@2HB		; std::_Arithmetic_traits<signed char>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@E@std@@2HB		; std::_Arithmetic_traits<unsigned char>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@F@std@@2HB		; std::_Arithmetic_traits<short>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@G@std@@2HB		; std::_Arithmetic_traits<unsigned short>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@H@std@@2HB		; std::_Arithmetic_traits<int>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@I@std@@2HB		; std::_Arithmetic_traits<unsigned int>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@J@std@@2HB		; std::_Arithmetic_traits<long>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@K@std@@2HB		; std::_Arithmetic_traits<unsigned long>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@_J@std@@2HB		; std::_Arithmetic_traits<__int64>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@_K@std@@2HB		; std::_Arithmetic_traits<unsigned __int64>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@M@std@@2HB		; std::_Arithmetic_traits<float>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@N@std@@2HB		; std::_Arithmetic_traits<double>::_Rank
PUBLIC	?_Rank@?$_Arithmetic_traits@O@std@@2HB		; std::_Arithmetic_traits<long double>::_Rank
CONST	SEGMENT
_MeterPerPixel DD 03bc985f0r			; 0.00615
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@O@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@O@std@@2HB DD 09H		; std::_Arithmetic_traits<long double>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@N@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@N@std@@2HB DD 08H		; std::_Arithmetic_traits<double>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@M@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@M@std@@2HB DD 07H		; std::_Arithmetic_traits<float>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@_K@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@_K@std@@2HB DD 06H		; std::_Arithmetic_traits<unsigned __int64>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@_J@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@_J@std@@2HB DD 06H		; std::_Arithmetic_traits<__int64>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@K@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@K@std@@2HB DD 05H		; std::_Arithmetic_traits<unsigned long>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@J@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@J@std@@2HB DD 05H		; std::_Arithmetic_traits<long>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@I@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@I@std@@2HB DD 04H		; std::_Arithmetic_traits<unsigned int>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@H@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@H@std@@2HB DD 04H		; std::_Arithmetic_traits<int>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@G@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@G@std@@2HB DD 03H		; std::_Arithmetic_traits<unsigned short>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@F@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@F@std@@2HB DD 03H		; std::_Arithmetic_traits<short>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@E@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@E@std@@2HB DD 02H		; std::_Arithmetic_traits<unsigned char>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@C@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@C@std@@2HB DD 02H		; std::_Arithmetic_traits<signed char>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@D@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@D@std@@2HB DD 02H		; std::_Arithmetic_traits<char>::_Rank
CONST	ENDS
;	COMDAT ?_Rank@?$_Arithmetic_traits@_N@std@@2HB
CONST	SEGMENT
?_Rank@?$_Arithmetic_traits@_N@std@@2HB DD 01H		; std::_Arithmetic_traits<bool>::_Rank
CONST	ENDS
;	COMDAT ?value@?$integral_constant@I$0A@@tr1@std@@2IB
CONST	SEGMENT
?value@?$integral_constant@I$0A@@tr1@std@@2IB DD 00H	; std::tr1::integral_constant<unsigned int,0>::value
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$00@tr1@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$00@tr1@std@@2_NB DB 01H	; std::tr1::integral_constant<bool,1>::value
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$0A@@tr1@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$0A@@tr1@std@@2_NB DB 00H	; std::tr1::integral_constant<bool,0>::value
CONST	ENDS
PUBLIC	??_H@YGXPAXIHP6EPAX0@Z@Z			; `vector constructor iterator'
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu /ZI
rtc$IMZ	ENDS
;	COMDAT ??_H@YGXPAXIHP6EPAX0@Z@Z
_TEXT	SEGMENT
___t$ = 8						; size = 4
___s$ = 12						; size = 4
___n$ = 16						; size = 4
___f$ = 20						; size = 4
??_H@YGXPAXIHP6EPAX0@Z@Z PROC				; `vector constructor iterator', COMDAT
	push	ebp
	mov	ebp, esp
	sub	esp, 192				; 000000c0H
	push	ebx
	push	esi
	push	edi
	lea	edi, DWORD PTR [ebp-192]
	mov	ecx, 48					; 00000030H
	mov	eax, -858993460				; ccccccccH
	rep stosd
$LN2@vector:
	mov	eax, DWORD PTR ___n$[ebp]
	sub	eax, 1
	mov	DWORD PTR ___n$[ebp], eax
	js	SHORT $LN3@vector
	mov	esi, esp
	mov	ecx, DWORD PTR ___t$[ebp]
	call	DWORD PTR ___f$[ebp]
	cmp	esi, esp
	call	__RTC_CheckEsp
	mov	eax, DWORD PTR ___t$[ebp]
	add	eax, DWORD PTR ___s$[ebp]
	mov	DWORD PTR ___t$[ebp], eax
	jmp	SHORT $LN2@vector
$LN3@vector:
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 192				; 000000c0H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
??_H@YGXPAXIHP6EPAX0@Z@Z ENDP				; `vector constructor iterator'
_TEXT	ENDS
PUBLIC	??_C@_0BI@JGKBEFBP@Resource?1Font?1font1?4fnt?$AA@ ; `string'
PUBLIC	??_C@_1BM@CBBODJAA@?$AAS?$AAc?$AAe?$AAn?$AAe?$AA1?$AAB?$AAg?$AAF?$AAr?$AAo?$AAn?$AAt?$AA?$AA@ ; `string'
PUBLIC	??_C@_1BO@OHOKLLPB@?$AAS?$AAc?$AAe?$AAn?$AAe?$AA1?$AAB?$AAg?$AAM?$AAi?$AAd?$AAd?$AAl?$AAe?$AA?$AA@ ; `string'
PUBLIC	??0D3DXVECTOR3@@QAE@MMM@Z			; D3DXVECTOR3::D3DXVECTOR3
PUBLIC	??_C@_1BK@DHGJHBGH@?$AAS?$AAc?$AAe?$AAn?$AAe?$AA1?$AAB?$AAg?$AAB?$AAa?$AAc?$AAk?$AA?$AA@ ; `string'
PUBLIC	__real@00000000
PUBLIC	__real@44fa0000
PUBLIC	__real@44228000
PUBLIC	??_7CMission@@6B@				; CMission::`vftable'
PUBLIC	__$ArrayPad$
PUBLIC	??0CMission@@QAE@PAVCGame@@@Z			; CMission::CMission
PUBLIC	??_R4CMission@@6B@				; CMission::`RTTI Complete Object Locator'
PUBLIC	??_R0?AVCMission@@@8				; CMission `RTTI Type Descriptor'
PUBLIC	??_R3CMission@@8				; CMission::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CMission@@8				; CMission::`RTTI Base Class Array'
PUBLIC	??_R1A@?0A@EA@CMission@@8			; CMission::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R1A@?0A@EA@CScreen@@8			; CScreen::`RTTI Base Class Descriptor at (0,-1,0,64)'
PUBLIC	??_R0?AVCScreen@@@8				; CScreen `RTTI Type Descriptor'
PUBLIC	??_R3CScreen@@8					; CScreen::`RTTI Class Hierarchy Descriptor'
PUBLIC	??_R2CScreen@@8					; CScreen::`RTTI Base Class Array'
PUBLIC	?Update@CMission@@UAEXM@Z			; CMission::Update
PUBLIC	?Render@CMission@@UAEXXZ			; CMission::Render
EXTRN	??3@YAXPAX@Z:PROC				; operator delete
EXTRN	??1CScreen@@UAE@XZ:PROC				; CScreen::~CScreen
EXTRN	??0hgeFont@@QAE@PBD_N@Z:PROC			; hgeFont::hgeFont
EXTRN	??0CPlayer@@QAE@PAVCGame@@PAVCSpriteManager@@@Z:PROC ; CPlayer::CPlayer
EXTRN	??2@YAPAXI@Z:PROC				; operator new
EXTRN	?CreateSprite@CSpriteManager@@QAEPAVCSprite@@UD3DXVECTOR3@@QA_WMMMM@Z:PROC ; CSpriteManager::CreateSprite
EXTRN	??0CScreen@@QAE@PAVCGame@@@Z:PROC		; CScreen::CScreen
EXTRN	___security_cookie:DWORD
EXTRN	___CxxFrameHandler3:PROC
EXTRN	__fltused:DWORD
EXTRN	@__security_check_cookie@4:PROC
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
EXTRN	??_ECMission@@UAEPAXI@Z:PROC			; CMission::`vector deleting destructor'
;	COMDAT ??_R2CScreen@@8
; File d:\mycodes\chaosfighter\trunk\chaosfighter\hgegame\screen\mission.cpp
rdata$r	SEGMENT
??_R2CScreen@@8 DD FLAT:??_R1A@?0A@EA@CScreen@@8	; CScreen::`RTTI Base Class Array'
rdata$r	ENDS
;	COMDAT ??_R3CScreen@@8
rdata$r	SEGMENT
??_R3CScreen@@8 DD 00H					; CScreen::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	01H
	DD	FLAT:??_R2CScreen@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCScreen@@@8
_DATA	SEGMENT
??_R0?AVCScreen@@@8 DD FLAT:??_7type_info@@6B@		; CScreen `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCScreen@@', 00H
_DATA	ENDS
;	COMDAT ??_R1A@?0A@EA@CScreen@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CScreen@@8 DD FLAT:??_R0?AVCScreen@@@8	; CScreen::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	00H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CScreen@@8
rdata$r	ENDS
;	COMDAT ??_R1A@?0A@EA@CMission@@8
rdata$r	SEGMENT
??_R1A@?0A@EA@CMission@@8 DD FLAT:??_R0?AVCMission@@@8	; CMission::`RTTI Base Class Descriptor at (0,-1,0,64)'
	DD	01H
	DD	00H
	DD	0ffffffffH
	DD	00H
	DD	040H
	DD	FLAT:??_R3CMission@@8
rdata$r	ENDS
;	COMDAT ??_R2CMission@@8
rdata$r	SEGMENT
??_R2CMission@@8 DD FLAT:??_R1A@?0A@EA@CMission@@8	; CMission::`RTTI Base Class Array'
	DD	FLAT:??_R1A@?0A@EA@CScreen@@8
rdata$r	ENDS
;	COMDAT ??_R3CMission@@8
rdata$r	SEGMENT
??_R3CMission@@8 DD 00H					; CMission::`RTTI Class Hierarchy Descriptor'
	DD	00H
	DD	02H
	DD	FLAT:??_R2CMission@@8
rdata$r	ENDS
;	COMDAT ??_R0?AVCMission@@@8
_DATA	SEGMENT
??_R0?AVCMission@@@8 DD FLAT:??_7type_info@@6B@		; CMission `RTTI Type Descriptor'
	DD	00H
	DB	'.?AVCMission@@', 00H
_DATA	ENDS
;	COMDAT ??_R4CMission@@6B@
rdata$r	SEGMENT
??_R4CMission@@6B@ DD 00H				; CMission::`RTTI Complete Object Locator'
	DD	00H
	DD	00H
	DD	FLAT:??_R0?AVCMission@@@8
	DD	FLAT:??_R3CMission@@8
rdata$r	ENDS
;	COMDAT ??_C@_0BI@JGKBEFBP@Resource?1Font?1font1?4fnt?$AA@
CONST	SEGMENT
??_C@_0BI@JGKBEFBP@Resource?1Font?1font1?4fnt?$AA@ DB 'Resource/Font/font'
	DB	'1.fnt', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_1BM@CBBODJAA@?$AAS?$AAc?$AAe?$AAn?$AAe?$AA1?$AAB?$AAg?$AAF?$AAr?$AAo?$AAn?$AAt?$AA?$AA@
CONST	SEGMENT
??_C@_1BM@CBBODJAA@?$AAS?$AAc?$AAe?$AAn?$AAe?$AA1?$AAB?$AAg?$AAF?$AAr?$AAo?$AAn?$AAt?$AA?$AA@ DB 'S'
	DB	00H, 'c', 00H, 'e', 00H, 'n', 00H, 'e', 00H, '1', 00H, 'B', 00H
	DB	'g', 00H, 'F', 00H, 'r', 00H, 'o', 00H, 'n', 00H, 't', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_1BO@OHOKLLPB@?$AAS?$AAc?$AAe?$AAn?$AAe?$AA1?$AAB?$AAg?$AAM?$AAi?$AAd?$AAd?$AAl?$AAe?$AA?$AA@
CONST	SEGMENT
??_C@_1BO@OHOKLLPB@?$AAS?$AAc?$AAe?$AAn?$AAe?$AA1?$AAB?$AAg?$AAM?$AAi?$AAd?$AAd?$AAl?$AAe?$AA?$AA@ DB 'S'
	DB	00H, 'c', 00H, 'e', 00H, 'n', 00H, 'e', 00H, '1', 00H, 'B', 00H
	DB	'g', 00H, 'M', 00H, 'i', 00H, 'd', 00H, 'd', 00H, 'l', 00H, 'e'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1BK@DHGJHBGH@?$AAS?$AAc?$AAe?$AAn?$AAe?$AA1?$AAB?$AAg?$AAB?$AAa?$AAc?$AAk?$AA?$AA@
CONST	SEGMENT
??_C@_1BK@DHGJHBGH@?$AAS?$AAc?$AAe?$AAn?$AAe?$AA1?$AAB?$AAg?$AAB?$AAa?$AAc?$AAk?$AA?$AA@ DB 'S'
	DB	00H, 'c', 00H, 'e', 00H, 'n', 00H, 'e', 00H, '1', 00H, 'B', 00H
	DB	'g', 00H, 'B', 00H, 'a', 00H, 'c', 00H, 'k', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT __real@44fa0000
CONST	SEGMENT
__real@44fa0000 DD 044fa0000r			; 2000
CONST	ENDS
;	COMDAT __real@44228000
CONST	SEGMENT
__real@44228000 DD 044228000r			; 650
CONST	ENDS
;	COMDAT ??_7CMission@@6B@
CONST	SEGMENT
??_7CMission@@6B@ DD FLAT:??_R4CMission@@6B@		; CMission::`vftable'
	DD	FLAT:??_ECMission@@UAEPAXI@Z
	DD	FLAT:?Update@CMission@@UAEXM@Z
	DD	FLAT:?Render@CMission@@UAEXXZ
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0CMission@@QAE@PAVCGame@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0CMission@@QAE@PAVCGame@@@Z$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0CMission@@QAE@PAVCGame@@@Z$1
	DD	00H
	DD	FLAT:__unwindfunclet$??0CMission@@QAE@PAVCGame@@@Z$2
__ehfuncinfo$??0CMission@@QAE@PAVCGame@@@Z DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??0CMission@@QAE@PAVCGame@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT ??0CMission@@QAE@PAVCGame@@@Z
_TEXT	SEGMENT
tv200 = -332						; size = 4
tv190 = -332						; size = 4
$T105805 = -324						; size = 4
$T105806 = -312						; size = 4
$T105809 = -300						; size = 4
$T105810 = -288						; size = 4
$T104811 = -276						; size = 12
$T104813 = -256						; size = 12
$T104815 = -236						; size = 12
_this$ = -24						; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_pGame$ = 8						; size = 4
??0CMission@@QAE@PAVCGame@@@Z PROC			; CMission::CMission, COMDAT
; _this$ = ecx
; Line 5
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??0CMission@@QAE@PAVCGame@@@Z
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 320				; 00000140H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-332]
	mov	ecx, 80					; 00000050H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _pGame$[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	call	??0CScreen@@QAE@PAVCGame@@@Z		; CScreen::CScreen
	mov	DWORD PTR __$EHRec$[ebp+8], 0
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CMission@@6B@
; Line 6
	push	ecx
	fld	DWORD PTR __real@44228000
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR __real@44fa0000
	fstp	DWORD PTR [esp]
	push	ecx
	fldz
	fstp	DWORD PTR [esp]
	push	ecx
	fldz
	fstp	DWORD PTR [esp]
	push	OFFSET ??_C@_1BK@DHGJHBGH@?$AAS?$AAc?$AAe?$AAn?$AAe?$AA1?$AAB?$AAg?$AAB?$AAa?$AAc?$AAk?$AA?$AA@
	push	ecx
	fldz
	fstp	DWORD PTR [esp]
	push	ecx
	fldz
	fstp	DWORD PTR [esp]
	push	ecx
	fldz
	fstp	DWORD PTR [esp]
	lea	ecx, DWORD PTR $T104811[ebp]
	call	??0D3DXVECTOR3@@QAE@MMM@Z		; D3DXVECTOR3::D3DXVECTOR3
	sub	esp, 12					; 0000000cH
	mov	ecx, esp
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+12]
	call	?CreateSprite@CSpriteManager@@QAEPAVCSprite@@UD3DXVECTOR3@@QA_WMMMM@Z ; CSpriteManager::CreateSprite
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+32], eax
; Line 7
	push	ecx
	fld	DWORD PTR __real@44228000
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR __real@44fa0000
	fstp	DWORD PTR [esp]
	push	ecx
	fldz
	fstp	DWORD PTR [esp]
	push	ecx
	fldz
	fstp	DWORD PTR [esp]
	push	OFFSET ??_C@_1BO@OHOKLLPB@?$AAS?$AAc?$AAe?$AAn?$AAe?$AA1?$AAB?$AAg?$AAM?$AAi?$AAd?$AAd?$AAl?$AAe?$AA?$AA@
	push	ecx
	fldz
	fstp	DWORD PTR [esp]
	push	ecx
	fldz
	fstp	DWORD PTR [esp]
	push	ecx
	fldz
	fstp	DWORD PTR [esp]
	lea	ecx, DWORD PTR $T104813[ebp]
	call	??0D3DXVECTOR3@@QAE@MMM@Z		; D3DXVECTOR3::D3DXVECTOR3
	sub	esp, 12					; 0000000cH
	mov	ecx, esp
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+12]
	call	?CreateSprite@CSpriteManager@@QAEPAVCSprite@@UD3DXVECTOR3@@QA_WMMMM@Z ; CSpriteManager::CreateSprite
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+28], eax
; Line 8
	push	ecx
	fld	DWORD PTR __real@44228000
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR __real@44fa0000
	fstp	DWORD PTR [esp]
	push	ecx
	fldz
	fstp	DWORD PTR [esp]
	push	ecx
	fldz
	fstp	DWORD PTR [esp]
	push	OFFSET ??_C@_1BM@CBBODJAA@?$AAS?$AAc?$AAe?$AAn?$AAe?$AA1?$AAB?$AAg?$AAF?$AAr?$AAo?$AAn?$AAt?$AA?$AA@
	push	ecx
	fldz
	fstp	DWORD PTR [esp]
	push	ecx
	fldz
	fstp	DWORD PTR [esp]
	push	ecx
	fldz
	fstp	DWORD PTR [esp]
	lea	ecx, DWORD PTR $T104815[ebp]
	call	??0D3DXVECTOR3@@QAE@MMM@Z		; D3DXVECTOR3::D3DXVECTOR3
	sub	esp, 12					; 0000000cH
	mov	ecx, esp
	mov	edx, DWORD PTR [eax]
	mov	DWORD PTR [ecx], edx
	mov	edx, DWORD PTR [eax+4]
	mov	DWORD PTR [ecx+4], edx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [ecx+8], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+12]
	call	?CreateSprite@CSpriteManager@@QAEPAVCSprite@@UD3DXVECTOR3@@QA_WMMMM@Z ; CSpriteManager::CreateSprite
	mov	edx, DWORD PTR _this$[ebp]
	mov	DWORD PTR [edx+24], eax
; Line 10
	push	20					; 00000014H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T105806[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 1
	cmp	DWORD PTR $T105806[ebp], 0
	je	SHORT $LN3@CMission
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+12]
	push	ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+4]
	push	eax
	mov	ecx, DWORD PTR $T105806[ebp]
	call	??0CPlayer@@QAE@PAVCGame@@PAVCSpriteManager@@@Z ; CPlayer::CPlayer
	mov	DWORD PTR tv190[ebp], eax
	jmp	SHORT $LN4@CMission
$LN3@CMission:
	mov	DWORD PTR tv190[ebp], 0
$LN4@CMission:
	mov	ecx, DWORD PTR tv190[ebp]
	mov	DWORD PTR $T105805[ebp], ecx
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR $T105805[ebp]
	mov	DWORD PTR [edx+16], eax
; Line 11
	push	3112					; 00000c28H
	call	??2@YAPAXI@Z				; operator new
	add	esp, 4
	mov	DWORD PTR $T105810[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 2
	cmp	DWORD PTR $T105810[ebp], 0
	je	SHORT $LN5@CMission
	push	0
	push	OFFSET ??_C@_0BI@JGKBEFBP@Resource?1Font?1font1?4fnt?$AA@
	mov	ecx, DWORD PTR $T105810[ebp]
	call	??0hgeFont@@QAE@PBD_N@Z			; hgeFont::hgeFont
	mov	DWORD PTR tv200[ebp], eax
	jmp	SHORT $LN6@CMission
$LN5@CMission:
	mov	DWORD PTR tv200[ebp], 0
$LN6@CMission:
	mov	eax, DWORD PTR tv200[ebp]
	mov	DWORD PTR $T105809[ebp], eax
	mov	BYTE PTR __$EHRec$[ebp+8], 0
	mov	ecx, DWORD PTR _this$[ebp]
	mov	edx, DWORD PTR $T105809[ebp]
	mov	DWORD PTR [ecx+20], edx
; Line 12
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 332				; 0000014cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0CMission@@QAE@PAVCGame@@@Z$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1CScreen@@UAE@XZ			; CScreen::~CScreen
__unwindfunclet$??0CMission@@QAE@PAVCGame@@@Z$1:
	mov	eax, DWORD PTR $T105806[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__unwindfunclet$??0CMission@@QAE@PAVCGame@@@Z$2:
	mov	eax, DWORD PTR $T105810[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	pop	ecx
	ret	0
__ehhandler$??0CMission@@QAE@PAVCGame@@@Z:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-336]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	ecx, DWORD PTR [edx-4]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??0CMission@@QAE@PAVCGame@@@Z
	jmp	___CxxFrameHandler3
text$x	ENDS
??0CMission@@QAE@PAVCGame@@@Z ENDP			; CMission::CMission
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??0D3DXVECTOR3@@QAE@MMM@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_fx$ = 8						; size = 4
_fy$ = 12						; size = 4
_fz$ = 16						; size = 4
??0D3DXVECTOR3@@QAE@MMM@Z PROC				; D3DXVECTOR3::D3DXVECTOR3, COMDAT
; _this$ = ecx
; File d:\program files\microsoft directx sdk (june 2010)\include\d3dx9math.inl
; Line 303
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
; Line 304
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR _fx$[ebp]
	fstp	DWORD PTR [eax]
; Line 305
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR _fy$[ebp]
	fstp	DWORD PTR [eax+4]
; Line 306
	mov	eax, DWORD PTR _this$[ebp]
	fld	DWORD PTR _fz$[ebp]
	fstp	DWORD PTR [eax+8]
; Line 307
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	12					; 0000000cH
??0D3DXVECTOR3@@QAE@MMM@Z ENDP				; D3DXVECTOR3::D3DXVECTOR3
_TEXT	ENDS
PUBLIC	??1CMission@@UAE@XZ				; CMission::~CMission
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_GCMission@@UAEPAXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___flags$ = 8						; size = 4
??_GCMission@@UAEPAXI@Z PROC				; CMission::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CMission@@UAE@XZ			; CMission::~CMission
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GCMission@@UAEPAXI@Z ENDP				; CMission::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	??_GhgeFont@@QAEPAXI@Z				; hgeFont::`scalar deleting destructor'
PUBLIC	??_GCPlayer@@QAEPAXI@Z				; CPlayer::`scalar deleting destructor'
;	COMDAT xdata$x
; File d:\mycodes\chaosfighter\trunk\chaosfighter\hgegame\screen\mission.cpp
xdata$x	SEGMENT
__unwindtable$??1CMission@@UAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??1CMission@@UAE@XZ$0
__ehfuncinfo$??1CMission@@UAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??1CMission@@UAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
; Function compile flags: /Odtp /RTCsu /ZI
xdata$x	ENDS
;	COMDAT ??1CMission@@UAE@XZ
_TEXT	SEGMENT
tv90 = -268						; size = 4
tv81 = -268						; size = 4
$T105840 = -260						; size = 4
$T105841 = -248						; size = 4
$T105844 = -236						; size = 4
$T105845 = -224						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
??1CMission@@UAE@XZ PROC				; CMission::~CMission, COMDAT
; _this$ = ecx
; Line 15
	push	ebp
	mov	ebp, esp
	push	-1
	push	__ehhandler$??1CMission@@UAE@XZ
	mov	eax, DWORD PTR fs:0
	push	eax
	sub	esp, 256				; 00000100H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-268]
	mov	ecx, 64					; 00000040H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	push	eax
	lea	eax, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, eax
	mov	DWORD PTR _this$[ebp], ecx
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax], OFFSET ??_7CMission@@6B@
	mov	DWORD PTR __$EHRec$[ebp+8], 0
; Line 16
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+16], 0
	je	SHORT $LN2@CMission@2
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	mov	DWORD PTR $T105841[ebp], ecx
	mov	edx, DWORD PTR $T105841[ebp]
	mov	DWORD PTR $T105840[ebp], edx
	cmp	DWORD PTR $T105840[ebp], 0
	je	SHORT $LN5@CMission@2
	push	1
	mov	ecx, DWORD PTR $T105840[ebp]
	call	??_GCPlayer@@QAEPAXI@Z
	mov	DWORD PTR tv81[ebp], eax
	jmp	SHORT $LN2@CMission@2
$LN5@CMission@2:
	mov	DWORD PTR tv81[ebp], 0
$LN2@CMission@2:
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+16], 0
; Line 17
	mov	eax, DWORD PTR _this$[ebp]
	cmp	DWORD PTR [eax+20], 0
	je	SHORT $LN1@CMission@2
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+20]
	mov	DWORD PTR $T105845[ebp], ecx
	mov	edx, DWORD PTR $T105845[ebp]
	mov	DWORD PTR $T105844[ebp], edx
	cmp	DWORD PTR $T105844[ebp], 0
	je	SHORT $LN7@CMission@2
	push	1
	mov	ecx, DWORD PTR $T105844[ebp]
	call	??_GhgeFont@@QAEPAXI@Z
	mov	DWORD PTR tv90[ebp], eax
	jmp	SHORT $LN1@CMission@2
$LN7@CMission@2:
	mov	DWORD PTR tv90[ebp], 0
$LN1@CMission@2:
	mov	eax, DWORD PTR _this$[ebp]
	mov	DWORD PTR [eax+20], 0
; Line 18
	mov	DWORD PTR __$EHRec$[ebp+8], -1
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CScreen@@UAE@XZ			; CScreen::~CScreen
	mov	ecx, DWORD PTR __$EHRec$[ebp]
	mov	DWORD PTR fs:0, ecx
	pop	ecx
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 268				; 0000010cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??1CMission@@UAE@XZ$0:
	mov	ecx, DWORD PTR _this$[ebp]
	jmp	??1CScreen@@UAE@XZ			; CScreen::~CScreen
__ehhandler$??1CMission@@UAE@XZ:
	mov	edx, DWORD PTR [esp+8]
	lea	eax, DWORD PTR [edx+12]
	mov	ecx, DWORD PTR [edx-272]
	xor	ecx, eax
	call	@__security_check_cookie@4
	mov	eax, OFFSET __ehfuncinfo$??1CMission@@UAE@XZ
	jmp	___CxxFrameHandler3
text$x	ENDS
??1CMission@@UAE@XZ ENDP				; CMission::~CMission
EXTRN	??1CPlayer@@QAE@XZ:PROC				; CPlayer::~CPlayer
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_GCPlayer@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___flags$ = 8						; size = 4
??_GCPlayer@@QAEPAXI@Z PROC				; CPlayer::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1CPlayer@@QAE@XZ			; CPlayer::~CPlayer
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@2
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@2:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GCPlayer@@QAEPAXI@Z ENDP				; CPlayer::`scalar deleting destructor'
_TEXT	ENDS
EXTRN	??1hgeFont@@QAE@XZ:PROC				; hgeFont::~hgeFont
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??_GhgeFont@@QAEPAXI@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
___flags$ = 8						; size = 4
??_GhgeFont@@QAEPAXI@Z PROC				; hgeFont::`scalar deleting destructor', COMDAT
; _this$ = ecx
	push	ebp
	mov	ebp, esp
	sub	esp, 204				; 000000ccH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-204]
	mov	ecx, 51					; 00000033H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	DWORD PTR _this$[ebp], ecx
	mov	ecx, DWORD PTR _this$[ebp]
	call	??1hgeFont@@QAE@XZ			; hgeFont::~hgeFont
	mov	eax, DWORD PTR ___flags$[ebp]
	and	eax, 1
	je	SHORT $LN1@scalar@3
	mov	eax, DWORD PTR _this$[ebp]
	push	eax
	call	??3@YAXPAX@Z				; operator delete
	add	esp, 4
$LN1@scalar@3:
	mov	eax, DWORD PTR _this$[ebp]
	pop	edi
	pop	esi
	pop	ebx
	add	esp, 204				; 000000ccH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
??_GhgeFont@@QAEPAXI@Z ENDP				; hgeFont::`scalar deleting destructor'
_TEXT	ENDS
PUBLIC	__real@3ff0000000000000
PUBLIC	__real@3fe0000000000000
PUBLIC	__real@3fe6666666666666
PUBLIC	__real@4069000000000000
PUBLIC	__$ArrayPad$
EXTRN	?SetPos@CSprite@@QAEXUD3DXVECTOR3@@@Z:PROC	; CSprite::SetPos
EXTRN	?GetPos@CSprite@@QAE?AUD3DXVECTOR3@@XZ:PROC	; CSprite::GetPos
EXTRN	?GetPos@CPlayer@@QAE?AUD3DXVECTOR3@@XZ:PROC	; CPlayer::GetPos
EXTRN	?Control@CPlayer@@QAEXXZ:PROC			; CPlayer::Control
EXTRN	?Update@CScreen@@UAEXM@Z:PROC			; CScreen::Update
EXTRN	@_RTC_CheckStackVars@8:PROC
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
CONST	ENDS
;	COMDAT __real@3fe0000000000000
CONST	SEGMENT
__real@3fe0000000000000 DQ 03fe0000000000000r	; 0.5
CONST	ENDS
;	COMDAT __real@3fe6666666666666
CONST	SEGMENT
__real@3fe6666666666666 DQ 03fe6666666666666r	; 0.7
CONST	ENDS
;	COMDAT __real@4069000000000000
CONST	SEGMENT
__real@4069000000000000 DQ 04069000000000000r	; 200
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT ?Update@CMission@@UAEXM@Z
_TEXT	SEGMENT
tv222 = -332						; size = 4
tv199 = -332						; size = 4
$T104852 = -324						; size = 12
$T104856 = -304						; size = 12
$T104857 = -284						; size = 12
$T104858 = -264						; size = 12
$T104859 = -244						; size = 12
_pos$104854 = -32					; size = 12
_this$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_fDeltaTime$ = 8					; size = 4
?Update@CMission@@UAEXM@Z PROC				; CMission::Update, COMDAT
; _this$ = ecx
; Line 21
	push	ebp
	mov	ebp, esp
	sub	esp, 332				; 0000014cH
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-332]
	mov	ecx, 83					; 00000053H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 22
	push	ecx
	fld	DWORD PTR _fDeltaTime$[ebp]
	fstp	DWORD PTR [esp]
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Update@CScreen@@UAEXM@Z		; CScreen::Update
; Line 24
	mov	eax, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [eax+16]
	call	?Control@CPlayer@@QAEXXZ		; CPlayer::Control
; Line 26
	lea	eax, DWORD PTR $T104852[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+16]
	call	?GetPos@CPlayer@@QAE?AUD3DXVECTOR3@@XZ	; CPlayer::GetPos
	fld	DWORD PTR [eax]
	fcomp	QWORD PTR __real@4069000000000000
	fnstsw	ax
	test	ah, 1
	jne	$LN1@Update
; Line 28
	lea	eax, DWORD PTR _pos$104854[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+28]
	call	?GetPos@CSprite@@QAE?AUD3DXVECTOR3@@XZ	; CSprite::GetPos
; Line 29
	fld	DWORD PTR _pos$104854[ebp]
	fsub	QWORD PTR __real@3fe6666666666666
	fstp	DWORD PTR _pos$104854[ebp]
; Line 30
	sub	esp, 12					; 0000000cH
	mov	eax, esp
	mov	ecx, DWORD PTR _pos$104854[ebp]
	mov	DWORD PTR [eax], ecx
	mov	edx, DWORD PTR _pos$104854[ebp+4]
	mov	DWORD PTR [eax+4], edx
	mov	ecx, DWORD PTR _pos$104854[ebp+8]
	mov	DWORD PTR [eax+8], ecx
	mov	edx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [edx+28]
	call	?SetPos@CSprite@@QAEXUD3DXVECTOR3@@@Z	; CSprite::SetPos
; Line 32
	push	ecx
	fldz
	fstp	DWORD PTR [esp]
	push	ecx
	fldz
	fstp	DWORD PTR [esp]
	lea	eax, DWORD PTR $T104856[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+32]
	call	?GetPos@CSprite@@QAE?AUD3DXVECTOR3@@XZ	; CSprite::GetPos
	fld	DWORD PTR [eax]
	fsub	QWORD PTR __real@3fe0000000000000
	fstp	DWORD PTR tv199[ebp]
	fld	DWORD PTR tv199[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	lea	ecx, DWORD PTR $T104857[ebp]
	call	??0D3DXVECTOR3@@QAE@MMM@Z		; D3DXVECTOR3::D3DXVECTOR3
	sub	esp, 12					; 0000000cH
	mov	edx, esp
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx], ecx
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+32]
	call	?SetPos@CSprite@@QAEXUD3DXVECTOR3@@@Z	; CSprite::SetPos
; Line 34
	push	ecx
	fldz
	fstp	DWORD PTR [esp]
	push	ecx
	fldz
	fstp	DWORD PTR [esp]
	lea	eax, DWORD PTR $T104858[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+24]
	call	?GetPos@CSprite@@QAE?AUD3DXVECTOR3@@XZ	; CSprite::GetPos
	fld	DWORD PTR [eax]
	fsub	QWORD PTR __real@3ff0000000000000
	fstp	DWORD PTR tv222[ebp]
	fld	DWORD PTR tv222[ebp]
	push	ecx
	fstp	DWORD PTR [esp]
	lea	ecx, DWORD PTR $T104859[ebp]
	call	??0D3DXVECTOR3@@QAE@MMM@Z		; D3DXVECTOR3::D3DXVECTOR3
	sub	esp, 12					; 0000000cH
	mov	edx, esp
	mov	ecx, DWORD PTR [eax]
	mov	DWORD PTR [edx], ecx
	mov	ecx, DWORD PTR [eax+4]
	mov	DWORD PTR [edx+4], ecx
	mov	eax, DWORD PTR [eax+8]
	mov	DWORD PTR [edx+8], eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+24]
	call	?SetPos@CSprite@@QAEXUD3DXVECTOR3@@@Z	; CSprite::SetPos
$LN1@Update:
; Line 37
	push	edx
	mov	ecx, ebp
	push	eax
	lea	edx, DWORD PTR $LN6@Update
	call	@_RTC_CheckStackVars@8
	pop	eax
	pop	edx
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 332				; 0000014cH
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	4
	npad	1
$LN6@Update:
	DD	1
	DD	$LN5@Update
$LN5@Update:
	DD	-32					; ffffffe0H
	DD	12					; 0000000cH
	DD	$LN4@Update
$LN4@Update:
	DB	112					; 00000070H
	DB	111					; 0000006fH
	DB	115					; 00000073H
	DB	0
?Update@CMission@@UAEXM@Z ENDP				; CMission::Update
_TEXT	ENDS
PUBLIC	__real@40a00000
PUBLIC	??_C@_04HMNJPFOE@F?3?$CFf?$AA@			; `string'
PUBLIC	__$ArrayPad$
EXTRN	?printf@hgeFont@@QAAXMMHPBDZZ:PROC		; hgeFont::printf
EXTRN	?Render@CScreen@@UAEXXZ:PROC			; CScreen::Render
;	COMDAT __real@40a00000
CONST	SEGMENT
__real@40a00000 DD 040a00000r			; 5
CONST	ENDS
;	COMDAT ??_C@_04HMNJPFOE@F?3?$CFf?$AA@
CONST	SEGMENT
??_C@_04HMNJPFOE@F?3?$CFf?$AA@ DB 'F:%f', 00H		; `string'
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT ?Render@CMission@@UAEXXZ
_TEXT	SEGMENT
$T104863 = -224						; size = 12
_this$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
?Render@CMission@@UAEXXZ PROC				; CMission::Render, COMDAT
; _this$ = ecx
; Line 39
	push	ebp
	mov	ebp, esp
	sub	esp, 228				; 000000e4H
	push	ebx
	push	esi
	push	edi
	push	ecx
	lea	edi, DWORD PTR [ebp-228]
	mov	ecx, 57					; 00000039H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	pop	ecx
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	DWORD PTR _this$[ebp], ecx
; Line 40
	mov	ecx, DWORD PTR _this$[ebp]
	call	?Render@CScreen@@UAEXXZ			; CScreen::Render
; Line 41
	lea	eax, DWORD PTR $T104863[ebp]
	push	eax
	mov	ecx, DWORD PTR _this$[ebp]
	mov	ecx, DWORD PTR [ecx+16]
	call	?GetPos@CPlayer@@QAE?AUD3DXVECTOR3@@XZ	; CPlayer::GetPos
	fld	DWORD PTR [eax]
	sub	esp, 8
	fstp	QWORD PTR [esp]
	push	OFFSET ??_C@_04HMNJPFOE@F?3?$CFf?$AA@
	push	0
	push	ecx
	fld	DWORD PTR __real@40a00000
	fstp	DWORD PTR [esp]
	push	ecx
	fld	DWORD PTR __real@40a00000
	fstp	DWORD PTR [esp]
	mov	edx, DWORD PTR _this$[ebp]
	mov	eax, DWORD PTR [edx+20]
	push	eax
	call	?printf@hgeFont@@QAAXMMHPBDZZ		; hgeFont::printf
	add	esp, 28					; 0000001cH
; Line 42
	pop	edi
	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	add	esp, 228				; 000000e4H
	cmp	ebp, esp
	call	__RTC_CheckEsp
	mov	esp, ebp
	pop	ebp
	ret	0
?Render@CMission@@UAEXXZ ENDP				; CMission::Render
_TEXT	ENDS
END
